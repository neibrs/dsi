<?php

/**
 * @file
 * The primary PHP file for the Drupal Materialize base theme.
 *
 * This file should only contain light helper functions and point to stubs in
 * other files containing more complex functions.
 *
 * The stubs should point to files within the `./includes` directory named after
 * the function itself minus the theme prefix. If the stub contains a group of
 * functions, then please organize them so they are related in some way and name
 * the file appropriately to at least hint at what it contains.
 *
 * All [pre]process functions, theme functions and template files lives inside
 * the `./templates` directory. This is a highly automated and complex system
 * designed to only load the necessary files when a given theme hook is invoked.
 *
 * @see materialize_theme()
 * @see \Drupal\materialize\Registry
 */

use Drupal\materialize\Materialize;
use Drupal\views\Form\ViewsForm;

/**
 * Initialize the active theme.
 */
Materialize::initialize();

/**
 * {@inheritdoc}
 * 1.
 * @see \Drupal\materialize\Materialize::getInfo()
 */
function materialize_theme() {
  return Materialize::getThemeHooks();
}

/**
 * {@inheritdoc}
 *
 * @see \Drupal\materialize\Plugin\Alter\ThemeRegistry::alter()
 *
 * 2.
 * @todo Remove once a proper replacement for the theme.registry service can be
 * created in a materialize_core sub-module.
 */
function materialize_theme_registry_alter(&$data, &$context1 = NULL, &$context2 = NULL) {
  Materialize::alter(__FUNCTION__, $data, $context1, $context2);
}

/**
 * {@inheritdoc}
 * 3.
 *
 * @see \Drupal\materialize\Plugin\Alter\ThemeSuggestions::alter()
 */
function materialize_theme_suggestions_alter(&$data, &$context1 = NULL, &$context2 = NULL) {
  Materialize::alter(__FUNCTION__, $data, $context1, $context2);
}

/**
 * {@inheritdoc}
 * @see \Drupal\materialize\Theme::alter()
 * $data: $form,
 * $context1: $form_state,
 * $context2: $form_id
 */
function materialize_form_alter(&$data, &$context1 = NULL, &$context2 = NULL) {
  if (isset($data['actions']['submit'])) {
    $data['actions']['submit']['#attributes']['class'] = [
      'btn',
      'btn-danger',
      'btn-sm',
    ];

    $classes = array_diff($data['actions']['submit']['#attributes']['class'], [
      'button',
      'button-action',
      'button--primary',
      'button--small',
    ]);
    $data['actions']['submit']['#attributes']['class'] = $classes;
  }
  if (isset($data['actions']['delete'])) {
    $data['actions']['delete']['#attributes']['class'] = [
      'btn',
      'btn-danger',
      'btn-sm',
    ];
  }
  if (isset($data['actions']['cancel'])) {
    $data['actions']['cancel']['#attributes']['class'] = [
      'btn',
      'btn-warning',
      'btn-sm',
    ];
  }
  if (isset($data['actions']['edit-add-block'])) {
    $data['actions']['edit-add-block']['#attributes']['class'] = [
      'btn',
      'btn-warning',
      'btn-sm',
    ];
  }

  // Make bulk_form inline.
  $form_object = $context1->getFormObject();
  if ($form_object instanceof ViewsForm) {
    if (isset($data['header']['bulk_form'])) {
      $data['header']['bulk_form']['#attributes']['class'] = 'form--inline clearfix';
    }
    else {
      $build_info = $context1->getBuildInfo();
      /** @var \Drupal\views\ViewExecutable $view_executable */
      $view_executable = $build_info['args'][0];
      $base_table = $view_executable->storage->get('base_table');
      $base_table = str_replace('_field_data', '', $base_table);
      if (isset($form['header'][$base_table . '_bulk_form'])) {
        $data['header'][$base_table . '_bulk_form']['#attributes']['class'] = 'form--inline clearfix';
      }
    }
  }

  Materialize::alter(__FUNCTION__, $data, $context1, $context2);
}

/**
 * {@inheritdoc}
 *
 * @see \Drupal\materialize\Materialize::preprocess()
 */
function materialize_preprocess(&$variables, $hook, $info) {
  Materialize::preprocess($variables, $hook, $info);
}

// After.

/**
 * {@inheritdoc}
 *
 * @see hook_materialize_colorize_text_alter()
 */
function materialize_materialize_colorize_text_alter(&$data, &$context1 = NULL, &$context2 = NULL) {
  Materialize::alter(__FUNCTION__, $data, $context1, $context2);
}

/**
 * {@inheritdoc}
 *
 * @see hook_materialize_iconize_text_alter()
 */
function materialize_materialize_iconize_text_alter(&$data, &$context1 = NULL, &$context2 = NULL) {
  Materialize::alter(__FUNCTION__, $data, $context1, $context2);
}

/**
 * {@inheritdoc}
 *
 * @see \Drupal\materialize\Plugin\Alter\ElementInfo::alter()
 */
function materialize_element_info_alter(&$data, &$context1 = NULL, &$context2 = NULL) {
  Materialize::alter(__FUNCTION__, $data, $context1, $context2);
}

/**
 * {@inheritdoc}
 *
 * @see \Drupal\materialize\Plugin\Form\SystemThemeSettings::alterForm()
 */
function materialize_form_system_theme_settings_alter(&$data, &$context1 = NULL, &$context2 = NULL) {
  Materialize::alter(__FUNCTION__, $data, $context1, $context2);
}

/**
 * {@inheritdoc}
 */
function materialize_js_settings_alter(&$data, &$context1 = NULL, &$context2 = NULL) {
  Materialize::alter(__FUNCTION__, $data, $context1, $context2);
}

/**
 * {@inheritdoc}
 *
 * @see \Drupal\materialize\Plugin\Alter\LibraryInfo::alter()
 */
function materialize_library_info_alter(&$data, &$context1 = NULL, &$context2 = NULL) {
  Materialize::alter(__FUNCTION__, $data, $context1, $context2);
}

/**
 * {@inheritdoc}
 *
 * @see \Drupal\materialize\Plugin\Alter\PageAttachments::alter()
 */
function materialize_page_attachments_alter(&$data, &$context1 = NULL, &$context2 = NULL) {
  Materialize::alter(__FUNCTION__, $data, $context1, $context2);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function materialize_preprocess_breadcrumb(&$variables) {
  // TODO, add class active to link.
  // 查找 classy 为什么能够找到 breadcrumb.html.twig 模板。
  // 分析 ThemeManager 查找模板的顺序,什么时候 Register 的模板
  $x = 'a';
}
