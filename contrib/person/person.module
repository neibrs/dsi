<?php

/**
 * @file
 * Contains person.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Database\Query\SelectInterface;
use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\organization\Entity\BusinessGroupEntityInterface;
use Drupal\person\Entity\PersonType;

/**
 * Implements hook_help().
 */
function person_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'person.entity_import.select_sheet':
      $output = '<p>';
      $output .= '注：<br>';
      $output .= '1. 如果导入身份证信息，会自动提取出生日期。如果同时导入Excel里的出生日期栏目，最终导入数据是Excel的出生日期。<br>';
      $output .= '2. 如果不导入调整后的工龄起算日期，工龄计算将根据入职日期计算。';
      $output .= '</p>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function person_theme() {
  $theme = [];

  $theme['person'] = [
    'render element' => 'elements',
    'file' => 'person.page.inc',
  ];
  $theme['person__full'] = [
    'base hook' => 'person',
  ];
  $theme['person__teaser'] = [
    'base hook' => 'person',
  ];

  $theme['person_form'] = [
    'render element' => 'form',
  ];

  return $theme;
}

/**
 * Implements hook_theme_suggestions_HOOK() for person.
 */
function person_theme_suggestions_person(array $variables) {
  $suggestions = [];
  $entity = $variables['elements']['#person'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'person__' . $sanitized_view_mode;
  $suggestions[] = 'person__' . $entity->bundle();
  $suggestions[] = 'person__' . $entity->bundle() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_entity_base_field_info().
 */
function person_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ($entity_type->id() == 'user') {

    $fields['person'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Person'))
      ->setSetting('target_type', 'person')
      ->setDisplayOptions('view', [
        'type' => 'entity_reference_label',
        'weight' => 6,
      ])
      ->setDisplayOptions('form', [
        'type' => 'entity_reference_autocomplete',
        'weight' => 6,
        'settings' => [
          'match_operator' => 'CONTAINS',
          'size' => '60',
          'placeholder' => '',
        ],
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE);
    // TODO add phone? field
  }

  if ($entity_type->id() == 'organization') {

    $fields['manager'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Manager'))
      ->setSetting('target_type', 'person')
      ->setDisplayOptions('view', [
        'type' => 'entity_reference_label',
        'weight' => 6,
      ])
      ->setDisplayOptions('form', [
        'type' => 'entity_reference_autocomplete',
        'weight' => 6,
        'settings' => [
          'match_operator' => 'CONTAINS',
          'placeholder' => '',
        ],
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE);
  }
  return $fields;

}

/**
 * Implements hook_entity_extra_field_info().
 */
function person_entity_extra_field_info() {
  $extra = [];

  foreach (PersonType::loadMultiple() as $bundle) {
    $extra['person'][$bundle->id()]['display']['user_roles'] = [
      'label' => t('User roles'),
      'description' => 'User roles',
      'weight' => 0,
    ];
  }

  $extra['user']['user']['view']['name'] = [
    'label' => t('Name'),
    'weight' => 0,
  ];

  return $extra;
}

/**
 * Implements hook_entity_field_access().
 */
function person_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {
  if ($field_definition->getName() == 'person' && $operation == 'edit') {
    if ($items && $items->getEntity()->getEntityTypeId() == 'user') {
      return AccessResult::allowedIfHasPermission($account, 'administer persons');
    }
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_ENTITY_TYPE_access() for organization.
 */
function person_organization_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ($operation == 'delete') {
    $count = \Drupal::entityTypeManager()->getStorage('person')->getQuery()
      ->condition('organization', $entity->id())
      ->count()
      ->execute();
    if (!$count) {
      return AccessResult::forbidden(t('%type is used by @count of %entity. You may not remove %type until you have removed all of the %type %entity.', [
        '%type' => t('Organization'),
        '%entity' => t('Person'),
        '@count' => $count,
      ]));
    }
  }
}

// TODO modify user_login form using phone number

/**
 * Implements hook_ENTITY_TYPE_load() for predefined_filter.
 */
function person_predefined_filter_load($entities) {
  /** @var \Drupal\entity_filter\Entity\PredefinedFilterInterface[] $entities */
  if (isset($entities['person_field_data'])) {
    $filters = $entities['person_field_data']->getFilters();

    $entity_type_manager = \Drupal::entityTypeManager();

    // Person type conditions
    $types = $entity_type_manager->getStorage('person_type')->loadByProperties([
        'status' => true,
      ]);
    foreach ($types as $id => $type) {
      $filters[] = [
        'table' => 'person_field_data',
        'field' => 'type',
        'admin_label' => '类型:' . $type->label(),
        'plugin_id' => 'person_type',
        'operator' => 'in',
        'value' => [
          $id => $id,
        ],
      ];
    }

    // People group.
    $groups = $entity_type_manager->getStorage('lookup')
      ->loadByProperties([
        'type' => 'people_group',
      ]);
    foreach ($groups as $id => $group) {
      $filters[] = [
        'table' => 'person_field_data',
        'field' => 'people_group',
        'admin_label' => '人员组:' . $group->label(),
        'plugin_id' => 'entity_reference_in_operator',
        'operator' => 'in',
        'value' => [
          $id => $id,
        ],
      ];
    }

    // Organization.
    $organizations = $entity_type_manager->getStorage('organization')
      ->loadMultiple();
    foreach ($organizations as $id => $organization) {
      $filters[] = [
        'table' => 'person_field_data',
        'field' => 'organization',
        'admin_label' => '组织:' . $organization->label(),
        'plugin_id' => 'entity_reference_in_operator',
        'operator' => 'in',
        'value' => [
          $id => $id,
        ],
      ];
    }

    $entities['person_field_data']->setFilters($filters);
  }
}

/**
 * Implements hook_ENTITY_TYPE_view() for user.
 */
function person_user_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($display->getComponent('name')) {
    if ($entity->person->entity) {
      $name = $entity->person->entity->label();
    }
    else {
      $name = $entity->label();
    }

    $build['name'] = [
      '#markup' => $name,
    ];
  }

}

/**
 * Implements hook_entity_type_alter().
 */
function person_entity_type_alter(array &$entity_types) {
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  $entity_types['user']->setClass('Drupal\person\Entity\User');
}

/**
 * Implements hook_entity_form_display_alter().
 */
function person_entity_form_display_alter(EntityFormDisplayInterface $form_display, array $context) {
  if (in_array($context['entity_type'], ['person_phone', 'person_address', 'identification_information']) && $context['form_mode'] == 'inline_entity_form') {
    $form_display->removeComponent('person');
  }

  //暂时屏蔽
  foreach (['rehire_date', 'termination_notified_date', 'termination_projected_date'] as $item) {
    $form_display->removeComponent($item);
  }

}

/**
 * Implements hook_cron().
 */
function person_cron() {
  $current_time = \Drupal::time()->getRequestTime();
  $storage = \Drupal::entityTypeManager()->getStorage('person');
  $query = $storage->getQuery();

  $or = $query->orConditionGroup()
    ->condition('type', ['ex_employee', 'ex_contingent_worker', 'ex_applicant'], 'in')
    ->condition('effective_dates.end_value', date('Y-m-d', $current_time), '<=')
    ->condition('status', FALSE);
  $query->condition($or);
  $ids = $query->execute();

  $persons = $storage->loadMultiple($ids);

  foreach ($persons as $id => $person) {
    $person->set('status', FALSE)
      ->save();
  }
}

/**
 * Implements hook_query_TAG_alter() for multiple_organization_access.
 */
function person_query_multiple_organization_access_alter(AlterableInterface $query) {
  $user = \Drupal::currentUser();
  if ($user->hasPermission('bypass multiple organization access')) {
    return;
  }

  /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
  $entity_type = $query->getMetaData('multiple_organization_entity');
  if (!$entity_type) {
    return;
  }

  $base_table = $entity_type->getDataTable() ?: $entity_type->getBaseTable();

  $tables = $query->getTables();
  $alias = NULL;
  foreach ($tables as $table) {
    if ($table['table'] == $base_table) {
      $alias = $table['alias'];
      break;
    }
  }

  if ($entity_type->get('multiple_organization_by_bundle')) {
    $types = \Drupal::entityTypeManager()
      ->getStorage($entity_type->getBundleEntityType())
      ->loadMultiple();
    $or = $query->orConditionGroup();
    foreach ($types as $id => $type) {
      $target_entity_type = \Drupal::entityTypeManager()->getDefinition($type->getTargetEntityTypeId());
      $table = $target_entity_type->getDataTable() ?: $target_entity_type->getBaseTable();
      $subquery = \Drupal::database()->select($table);
      $subquery->addField($table, 'id');
      employee_assignment_add_multiple_organization_conditions($subquery, $target_entity_type);

      $and = $query->andConditionGroup();
      $and->condition("${alias}." . $entity_type->getKey('bundle'), $id)
        ->condition("${alias}.entity_id", $subquery, 'IN');
      $or->condition($and);
    }
    $query->condition($or);
  }
  else {
    employee_assignment_add_multiple_organization_conditions($query, $entity_type);
  }
}

function employee_assignment_add_multiple_organization_conditions(AlterableInterface $query, EntityTypeInterface $entity_type) {

  if ($query instanceof SelectInterface) {
    $base_table = $entity_type->getDataTable() ?: $entity_type->getBaseTable();

    $tables = $query->getTables();
    foreach ($tables as $table) {
      if ($table['table'] == $base_table) {
        $alias = $table['alias'];
        break;
      }
    }
  }

  $multiple_organization_classification = $entity_type->get('multiple_organization_classification');
  if (!$multiple_organization_classification) {
    $multiple_organization_field = $entity_type->get('multiple_organization_field');
    if (!$multiple_organization_field) {
      throw new \Exception(sprintf('%entity does not have multiple_organization defined.', ['%entity' => $entity_type->id()]));
    }
    $field_storage_definitions = \Drupal::service('entity_field.manager')->getFieldStorageDefinitions($entity_type->id());
    $field_storage_definition = $field_storage_definitions[$multiple_organization_field];
    // 多组织字段实体类型id
    $entity_type_id = $field_storage_definition->getSetting('target_type');

    list($target_entity_type_id, $field_multiple_organization_classification, $query_field_prefix) = buildMultipleOrganizationQueryParameter($entity_type_id, '');
    $target_entity_type = \Drupal::entityTypeManager()->getDefinition($target_entity_type_id);
  }

  /** @var \Drupal\person\Entity\PersonInterface $person */
  $classification = $multiple_organization_classification ? : $field_multiple_organization_classification;
  $organization = \Drupal::service('person.manager')->currentPersonOrganizationByClassification($classification);
  if (isset($organization)) {
    $organizations = \Drupal::service('person.manager')->currentPersonAccessibleOrganizationByClassification($multiple_organization_classification? : $field_multiple_organization_classification);
    $organizations = array_keys($organizations);

    // 实体本身拥有multiple_organization_classification
    if (!isset($multiple_organization_field)) {
      if ($entity_type->id() == 'organization' && $multiple_organization_classification == 'business_group') {
        $query->condition($query->orConditionGroup()
          ->condition("${alias}.business_group", $organizations, 'IN')
          ->condition("${alias}.id", $organizations, 'IN')
        );
      }
      else {
        $parent_organizations = [];
        if ($master_field = $entity_type->getKey('master')) {
          $parent_organizations = \Drupal::entityTypeManager()
            ->getStorage('organization')
            ->loadParentsByClassification($organization, $multiple_organization_classification);
          $parent_organizations = array_keys($parent_organizations);
        }
        // 如果需要进行主数据管理(Master data)，并且有上级多组织.
        if (!empty($parent_organizations)) {
          $query->condition($query->orConditionGroup()
            ->condition("${alias}.${multiple_organization_classification}", $organizations, 'IN')
            ->condition($query->andConditionGroup()
              ->condition($alias . '.master', TRUE)
              ->condition("${alias}.${multiple_organization_classification}", $parent_organizations, 'IN')
            )
          );
        }
        else {
          $query->condition("${alias}.${multiple_organization_classification}", $organizations, 'IN');
        }
      }
    }
    else {
      $subquery = \Drupal::entityTypeManager()->getStorage($entity_type_id)->getQuery();
      if ($target_entity_type_id == 'organization' && $field_multiple_organization_classification == 'business_group') {
        $subquery->condition($subquery->orConditionGroup()
          ->condition(empty($query_field_prefix) ? 'business_group' : "${query_field_prefix}.entity.business_group", $organizations, 'IN')
          ->condition(empty($query_field_prefix) ? 'id' : $query_field_prefix . '.entity.id', $organizations, 'IN')
        );
      }
      else {
        $parent_organizations = [];
        if ($master_field = $target_entity_type->getKey('master')) {
          $parent_organizations = \Drupal::entityTypeManager()
            ->getStorage('organization')
            ->loadParentsByClassification($organization, $multiple_organization_classification);
          $parent_organizations = array_keys($parent_organizations);
        }
        if (!empty($parent_organizations)) {
          $subquery->condition($subquery->orConditionGroup()
            ->condition(empty($query_field_prefix) ? $field_multiple_organization_classification : "${query_field_prefix}.entity.${field_multiple_organization_classification}", $organizations, 'IN')
            ->condition($subquery->andConditionGroup()
              ->condition(empty($query_field_prefix) ? 'master' :"${query_field_prefix}.entity.master", TRUE)
              ->condition(empty($query_field_prefix) ? $field_multiple_organization_classification : "${query_field_prefix}.entity.${field_multiple_organization_classification}", $parent_organizations, 'IN')
            ));
        }
        else {
          $subquery->condition(empty($query_field_prefix) ? $field_multiple_organization_classification : "${query_field_prefix}.entity.${field_multiple_organization_classification}", $organizations, 'IN');
        }
      }

      $allow_ids = $subquery->execute();
      if (!empty($allow_ids)) {
        $query->condition($alias . '.' . $multiple_organization_field, $allow_ids,'IN');

        // 用于过滤没有设置multiple_organization_classification,
        // 但设置了multiple_organization_field的实体数据，应用于多组织数据筛选
        if ($entity_type instanceof BusinessGroupEntityInterface) {
          // 不能筛选多重业务组,@see $parent_organizations
          $query->condition('business_group', $organization->id());
        }

        // 1. 如果当前组织负责人存在，并且等于当前人员，找出所有属于当前组织的子级内的人员，并为当前负责人显示所有子级人员的数据。
        if ($organization->get('manager')->target_id == \Drupal::currentPerson()->id()) {
          // 1. 当前负责人下所有子级组织
          $children_organization = \Drupal::entityTypeManager()->getStorage('organization')->loadAllChildren($organization->id(), [], TRUE);
          // 2. 找出所有组织成员
          $persons = \Drupal::service('person.manager')->loadSubordinatesIds($children_organization);
          // 3. 过滤所有属于这些组织成员的数据
          $query->condition($alias. '.' . $entity_type->get('personal_owner'), $persons, 'IN');
        }
        else if ($personal_owner = $entity_type->get('personal_owner')) {
          // TODO, 添加跟进人为空的条件
          $query->condition($alias. '.' . $personal_owner, \Drupal::service('person.manager')->currentPerson()->id());
        }
      }
      // 所属业务组无数据
      else {
        $query->where('1 = 0');
      }
    }
  }
  else {
    $query->where('1 = 0');
  }

}

function buildMultipleOrganizationQueryParameter($entity_type_id, $query_field_prefix) {
  $target_entity_type_id = $entity_type_id;

  $entity_type = \Drupal::entityTypeManager()->getDefinition($entity_type_id);
  if ($multiple_organization_classification = $entity_type->get('multiple_organization_classification')) {
    return [$target_entity_type_id, $multiple_organization_classification, $query_field_prefix];
  }

  $multiple_organization_field = $entity_type->get('multiple_organization_field');
  if (!$multiple_organization_field) {
    throw new \Exception(sprintf('%entity must have multiple_organization_classification or multiple_organization_field defined.', ['%entity' => $entity_type_id]));
  }

  if (!empty($query_field_previx)) {
    $query_field_prefix .= '.entity.';
  }
  $query_field_prefix .= $multiple_organization_field;

  $field_storage_definitions = \Drupal::service('entity_field.manager')->getFieldStorageDefinitions($entity_type_id);
  $field_storage_definition = $field_storage_definitions[$multiple_organization_field];
  $target_entity_type_id = $field_storage_definition->getSetting('target_type');
  return buildMultipleOrganizationQueryParameter($target_entity_type_id, $query_field_prefix);
}
