<?php

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\lookup\InstallHelper;

/**
 * Implements hook_install().
 */
function dsi_contract_install($is_syncing) {
  /** @var \Drupal\Core\Entity\EntityStorageInterface $lookup_storage */
  $lookup_storage = \Drupal::service('entity_type.manager')->getStorage('lookup');
  $data = [
    '1' => '夫妻',
    '2' => '父母',
    '3' => '子女',
    '4' => '兄弟姐妹',
    '5' => '外祖父',
    '6' => '外祖母',
    '7' => '其他',
  ];
  \Drupal::classResolver(InstallHelper::class)
    ->getOrCreateLookup('litigant_relationship', $data, '与当事人关系', $lookup_storage);

  $data = [
    '1' => '特别授权',
    '2' => '一般授权',
  ];
  \Drupal::classResolver(InstallHelper::class)
    ->getOrCreateLookup('auth_type', $data, '授权类型', $lookup_storage);

  $data = [
    '1' => '包干制',
    '2' => '实报实销',
  ];
  \Drupal::classResolver(InstallHelper::class)
    ->getOrCreateLookup('travel_expenses_agreement', $data, '差旅费约定', $lookup_storage);


}

/**
 * Implements hook_update_N() add contract field for client.
 */
function dsi_contract_update_20121001(&$sandbox) {
  $storage_definition = BaseFieldDefinition::create('entity_reference')
    ->setLabel(t('Contract'))
    ->setSetting('target_type', 'dsi_contract')
    ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('contract', 'dsi_client', 'dsi_client', $storage_definition);
}

/**
 * Implements hook_update_N() add contract field for contract.
 */
function dsi_contract_update_20122201(&$sandbox) {
  $entityDefinitionUpdateManager = \Drupal::entityDefinitionUpdateManager();

  $storage_definition = BaseFieldDefinition::create('string')
    ->setLabel(t('Party B', [], ['context' => 'Contract']));
  $entityDefinitionUpdateManager
    ->installFieldStorageDefinition('party_b', 'dsi_contract', 'dsi_contract', $storage_definition);

  $storage_definition = BaseFieldDefinition::create('integer')
    ->setLabel(t('Period', [], ['context' => 'Contract']));
  $entityDefinitionUpdateManager
    ->installFieldStorageDefinition('period', 'dsi_contract', 'dsi_contract', $storage_definition);

  $storage_definition = BaseFieldDefinition::create('integer')
    ->setLabel(t('Automatic Delay', [], ['context' => 'Contract']));
  $entityDefinitionUpdateManager
    ->installFieldStorageDefinition('automatic_delay', 'dsi_contract', 'dsi_contract', $storage_definition);

  $storage_definition = BaseFieldDefinition::create('string')
    ->setLabel(t('Cooperation Content', [], ['context' => 'Contract']));
  $entityDefinitionUpdateManager
    ->installFieldStorageDefinition('cooperation_content', 'dsi_contract', 'dsi_contract', $storage_definition);

  $storage_definition = BaseFieldDefinition::create('entity_reference')
    ->setLabel(t('Contract State', [], ['context' => 'Contract']))
    ->setSetting('target_type', 'lookup')
    ->setSetting('handler_settings', [
      'target_bundles' => ['contract_state' => 'contract_state'],
      'auto_create' => TRUE,
    ]);
  $entityDefinitionUpdateManager
    ->installFieldStorageDefinition('contract_state', 'dsi_contract', 'dsi_contract', $storage_definition);

  /** @var \Drupal\Core\Entity\EntityStorageInterface $lookup_storage */
  $lookup_storage = \Drupal::service('entity_type.manager')->getStorage('lookup');
  $data = [
    '1' => '未执行',
    '2' => '履行中',
    '3' => '已终止',
  ];
  \Drupal::classResolver(InstallHelper::class)
    ->getOrCreateLookup('contract_state', $data, '合同状态', $lookup_storage);
}
